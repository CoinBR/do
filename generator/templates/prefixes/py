#!/usr/bin/env python3

import os
from sys import argv
from collections import deque as dq

from generator.get_cfg import get_cfg, DIRS, DISTROS, LANGS


CFG = get_cfg()

def list_files(directory):
    return [f for f in os.listdir(directory) if os.path.isfile(join(directory, f))]

def list_dirs(directory):
    return [f for f in os.listdir(directory) if os.path.isdir(join(directory, f))]


def run(cmdz, args='', cd: str=DIRS['project']):

    if not isinstance(cmdz, str):
        return dq(run(cmd, args, cd) for cmd in cmdz)

    if not isinstance(args, str):
        fixed_args = ' '.join(args) if len(args) else ''
        return launch(cmdz, fixed_args)

    run_cmd = 'cd {} && {} {}'.format(cd, cmdz, args)

    print('\n + {0} {1} {0} \n'.format(12 * '*', run_cmd))
    os.system(run_cmd)


def try_launch_in_submodules(scriptz_pathz):

#    def launch(proj_dir, scripts_paths):
#        do_path = os.path.join(proj_dir, 'do')
#        dq(os.system(os.path.join(do_path, script_path)) for script_path in scripts_paths)


    if isinstance(scriptz_pathz, str):
        return try_launch_in_submodules([scriptz_pathz])

    subroot = os.path.join(DIRS['project'], 'submodules')
    if not (os.path.exists(subroot) and os.path.isdir(subroot)):
        return

    projs = [d for d in os.listdir(subroot) 
            if os.path.isdir(os.path.join(subroot, d))]


    # always execute 'generate' script before running submodules' scripts
    scripts_paths = ['do/generator/generate.py'] + scriptz_pathz

    dq(run(scripts_paths, cd=os.path.join(subroot, proj)) for proj in projs)


################################
##### PREFIX ENDS   ############
##### Script Starts ############
################################


